flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flasg_shapes <- flags[, 19:23]
flags_shapes <- flags[, 19:23]
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class (shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags)
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals)
sapply(unique_vals, length)
lapply(unique_vals, length)
lapply(flags, unique)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character1())
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red,summary)
tapply(flags$population, flags$landmass = 0, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
library(datasets)
data(iris)
?iris
library(datasets)
data(iris)
?iris
sepal_mean <- tapply(iris$Sepal.Length, iris$Species.virginica, mean)
View(iris)
library(datasets)
data(iris)
?iris
sepal_mean <- tapply(iris$Sepal.Length, iris$Species = "virginica", mean)
sepal_mean <- tapply(iris$Sepal.Length, iris$Species, mean)
library(datasets)
data(iris)
?iris
sepal_mean <- tapply(iris$Sepal.Length, iris$Species, mean)
library(datasets)
data(iris)
?iris
sepal_mean <- tapply(iris$Sepal.Length, iris$Species, mean)
library(datasets)
data(iris)
?iris
sepal_mean <- tapply(iris$Sepal.Length, iris$Species, mean)
sepal_mean <- tapply(iris$Sepal.Length, iris$Species, mean)
library(datasets)
data(iris)
sepal_mean <- tapply(iris$Sepal.Length, iris$Species, mean)
sepal_mean
library(datasets)
data(iris)
sepal_mean <- tapply(iris$Sepal.Length, iris$Species[3], mean)
sepal_mean
library(datasets)
data(iris)
sepal_mean <- tapply(iris$Sepal.Length, iris$Species[3], mean)
sepal_mean
library(datasets)
data(iris)
sepal_mean <- tapply(iris$Sepal.Length, iris$Species[3], mean)
sepal_mean
library(datasets)
data(iris)
sepal_mean <- tapply(iris$Sepal.Length, iris$Species, mean)
sepal_mean
apply(iris, 2, mean)
library(datasets)
data(iris)
sepal_mean <- tapply(iris$Sepal.Length, iris$Species, mean)
sepal_mean
apply(iris, 1, mean)
library(datasets)
data(iris)
sepal_mean <- tapply(iris$Sepal.Length, iris$Species, mean)
sepal_mean
apply(iris[, 1:4], 2, mean)
library(datasets)
data(iris)
sepal_mean <- tapply(iris$Sepal.Length, iris$Species, mean)
sepal_mean
apply(iris[, 1:4], 2, mean)
colMeans(iris)
# library(datasets)
# data(iris)
#
#
# sepal_mean <- tapply(iris$Sepal.Length, iris$Species, mean)
# sepal_mean
#
# apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
# library(datasets)
# data(iris)
#
#
# sepal_mean <- tapply(iris$Sepal.Length, iris$Species, mean)
# sepal_mean
#
# apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
# library(datasets)
# data(iris)
#
#
# sepal_mean <- tapply(iris$Sepal.Length, iris$Species, mean)
# sepal_mean
#
# apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
# library(datasets)
# data(iris)
#
#
# sepal_mean <- tapply(iris$Sepal.Length, iris$Species, mean)
# sepal_mean
#
# apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
# library(datasets)
# data(iris)
#
#
# sepal_mean <- tapply(iris$Sepal.Length, iris$Species, mean)
# sepal_mean
#
# apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
mtcars
View(mtcars)
View(flags_shapes)
# library(datasets)
# data(iris)
#
#
# sepal_mean <- tapply(iris$Sepal.Length, iris$Species, mean)
# sepal_mean
#
# apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
split(mtcars, mtcars$cyl)
# library(datasets)
# data(iris)
#
#
# sepal_mean <- tapply(iris$Sepal.Length, iris$Species, mean)
# sepal_mean
#
# apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
split(mtcars, mtcars$cyl)
# library(datasets)
# data(iris)
#
#
# sepal_mean <- tapply(iris$Sepal.Length, iris$Species, mean)
# sepal_mean
#
# apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
# library(datasets)
# data(iris)
#
#
# sepal_mean <- tapply(iris$Sepal.Length, iris$Species, mean)
# sepal_mean
#
# apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
# library(datasets)
# data(iris)
#
#
# sepal_mean <- tapply(iris$Sepal.Length, iris$Species, mean)
# sepal_mean
#
# apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
sapply(mtcars, cyl, mean)
# library(datasets)
# data(iris)
#
#
# sepal_mean <- tapply(iris$Sepal.Length, iris$Species, mean)
# sepal_mean
#
# apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
sapply(mtcars, mtcars$cyl, mean)
# library(datasets)
# data(iris)
#
#
# sepal_mean <- tapply(iris$Sepal.Length, iris$Species, mean)
# sepal_mean
#
# apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
with(mtcars, tapply(mpg, cyl, mean))
# library(datasets)
# data(iris)
#
#
# sepal_mean <- tapply(iris$Sepal.Length, iris$Species, mean)
# sepal_mean
#
# apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
mean(mtcars$mpg, mtcars$cyl)
# library(datasets)
# data(iris)
#
#
# sepal_mean <- tapply(iris$Sepal.Length, iris$Species, mean)
# sepal_mean
#
# apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
tapply(mtcars$cyl, mtcars$mpg, mean)
# library(datasets)
# data(iris)
#
#
# sepal_mean <- tapply(iris$Sepal.Length, iris$Species, mean)
# sepal_mean
#
# apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
apply(mtcars, 2, mean)
# library(datasets)
# data(iris)
#
#
# sepal_mean <- tapply(iris$Sepal.Length, iris$Species, mean)
# sepal_mean
#
# apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
tapply(mtcars$hp, mtcars$cyl, mean)
# library(datasets)
# data(iris)
#
#
# sepal_mean <- tapply(iris$Sepal.Length, iris$Species, mean)
# sepal_mean
#
# apply(iris[, 1:4], 2, mean)
# library(datasets)
# data(mtcars)
#
# tapply(mtcars$hp, mtcars$cyl, mean)
debug(ls)
debug(ls)
# library(datasets)
# data(iris)
#
#
# sepal_mean <- tapply(iris$Sepal.Length, iris$Species, mean)
# sepal_mean
#
# apply(iris[, 1:4], 2, mean)
# library(datasets)
# data(mtcars)
#
# tapply(mtcars$hp, mtcars$cyl, mean)
debug(ls)
ls
# library(datasets)
# data(iris)
#
#
# sepal_mean <- tapply(iris$Sepal.Length, iris$Species, mean)
# sepal_mean
#
# apply(iris[, 1:4], 2, mean)
# library(datasets)
# data(mtcars)
#
# tapply(mtcars$hp, mtcars$cyl, mean)
debug(ls)
ls()
# library(datasets)
# data(iris)
#
#
# sepal_mean <- tapply(iris$Sepal.Length, iris$Species, mean)
# sepal_mean
#
# apply(iris[, 1:4], 2, mean)
# library(datasets)
# data(mtcars)
#
# tapply(mtcars$hp, mtcars$cyl, mean)
debug(ls)
ls
# library(datasets)
# data(iris)
#
#
# sepal_mean <- tapply(iris$Sepal.Length, iris$Species, mean)
# sepal_mean
#
# apply(iris[, 1:4], 2, mean)
# library(datasets)
# data(mtcars)
#
# tapply(mtcars$hp, mtcars$cyl, mean)
debug(ls)
ls()
# library(datasets)
# data(iris)
#
#
# sepal_mean <- tapply(iris$Sepal.Length, iris$Species, mean)
# sepal_mean
#
# apply(iris[, 1:4], 2, mean)
# library(datasets)
# data(mtcars)
#
# tapply(mtcars$hp, mtcars$cyl, mean)
debug(ls)
ls()
setwd("~/Downloads/ProgrammingAssignment2")
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
test(mat1)
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
test(mat1)
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
test(mat1)
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
test(mat1)
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
test(mat
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
test(mat1)
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
test(mat1)
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
mat1
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
test(matrix())
sessionInfo()
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
test(matrix())
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
test(matrix())
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
test(mat1)
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
test(mat1)
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
test(mat1)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
library(Matrix)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv = x$getInverse()
if (!is.null(inv))
{
return(inv)
}
matrix_data <- x$get()
inv <- solve(matrix_data)
x$set(inv)
return(inv)
}
test <- function(mat){
## @mat: an invertible matrix
temp = makeCacheMatrix(mat)
start.time = Sys.time()
cacheSolve(temp)
dur = Sys.time() - start.time
print(dur)
start.time = Sys.time()
cacheSolve(temp)
dur = Sys.time() - start.time
print(dur)
}
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
test(mat1)
# sessionInfo()
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
test(mat1)
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
test(mat1)
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
test(mat1)
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
test(mat1)
# sessionInfo()
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
test(mat1)
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
test(mat1)
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
test(mat1)
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
test(mat1)
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
test(mat1)
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
test(mat1)
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
test(mat1)
